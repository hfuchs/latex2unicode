#!/usr/bin/perl

use strict; use warnings; use utf8;
use feature qw/say switch/;

# Perl Modules
use Encode;
#use charnames ':full'; # "\N{WHITE SMILING FACE}";
#use Data::Dumper;
use POSIX qw(floor);

# My Modules
use lib qw/lib/;
use L2U::Constants;
use L2U::Handlers;
#use L2U::Logger;  # TODO No such thing!

my $DEBUG = 0;     # TODO How about a command-line switch?

# -- Main
# ----------------------------------------------------------------------

my $input = decode_utf8 join ' ', @ARGV;

# This is it.  That's latex2unicode, ladies'n'gentlemen.
pretty_print(expand(substitute_chars(normalize_input($input))));

# -- Subroutines
# ----------------------------------------------------------------------

# Output
sub pretty_print {
    my $box = shift; # reference

    say encode_utf8 $_ foreach @{$box->{content}};
}

# Parser
sub expand {
    # expand - parse TeX string, delegate handling of different symbols
    # to the appropriate functions and collect the boxes that they
    # return onto a stack.  This stack is returned as an all-
    # encompassing box at EOS (end-of-string).
    #
    # TODO PODify documentation.
    # TODO Allow for arrays to be passed.
    # TODO Much too huge.
    my @str = split //, shift;
    my @stack;
    D("> expand [" . join('', @str). "]");

    while (@str) {
        given (shift @str) {
            when (is_primitive($_)) {
                push @stack, make_unity_box($_);
            }
            when (/\\/) { # Encountered macro sign, find handler.
                push @stack, process_macro(\@str);
            }
            # The power and subscript signs (exponents and indices) are
            # an inconvenient (as seen from here) inversion of the macro
            # concept: their handlers need to know what block went
            # *before*.  TODO Are there more of these?
            when (/(_|\^)/) {
                # TODO Move this part into a separate handler!
                unshift @str, $_;

                my ($upper, $lower) = find_limits(\@str);
                # TODO The following lines become obsolete when
                # find_limits() returns empty boxes.
                $upper = make_empty_box() unless ($upper);
                $lower = make_empty_box() unless ($lower);
                #say STDERR Dumper($upper, $lower);

                my ($min_head, $min_foot) = (0, 0);
                if (not defined $stack[-1]) {
                    say STDERR "No block before '^' sign?";
                } else {
                    $min_head = $stack[-1]->{head};
                    $min_foot = $stack[-1]->{foot};
                }
                #say STDERR "mins: $min_head, $min_foot";

                my $box;

                if (my $super = is_superscriptable($upper) and
                    $min_head == 0 and
                    is_empty_box($lower)
                ) {
                    $box = {
                        content => [ $super ],
                        width   => 1,  height => 1,
                        foot    => 0,  head    => 0,
                    };
                } elsif (
                    my $sub = is_subscriptable($lower) and
                    $min_foot == 0 and
                    is_empty_box($upper)
                    #$equation_is_simple
                ) {
                    $box = {
                        content => [ $sub ],
                        width => 1, height => 1,
                        foot => 0, head => 0,
                    };
                } else {
                    my $width = hpad('left-aligned', $upper, $lower);
                    my @content = ();
                    push @content, @{$upper->{content}};
                    foreach my $i (0 .. $min_head+$min_foot) {
                        push @content, " " x $width;
                    }
                    push @content, @{$lower->{content}};

                    $box = {
                        content => \@content,
                        width   => $width,
                        height  => scalar(@content),
                        foot    => $min_foot + $lower->{height},
                        head    => $min_head + $upper->{height},
                    };
                }

                push @stack, $box;
            }
            when (/{/) {
                # TODO Another kludge: Putting the curly brace back...
                unshift @str, '{';
                push @stack, find_block(\@str);
            }
            default { die "New character class? [@str]" }
        }
    }

    return boxify(@stack);
}

# Box Creation, Padding & Tester
sub make_unity_box {
    my $arg = shift; # TODO Test is_one_char().
    my $box = make_empty_box();

    $arg = ' ' unless (defined $arg);

    $box->{content} = [ $arg ];
    $box->{width}++;
    $box->{height}++;

    return $box;
}

sub make_empty_box {
    my $box = {
        content => undef,
        width   => 0,
        height  => 0,
        head    => 0,
        foot    => 0
    };
    return $box;
}

sub boxify {
    D("> boxify");
    my @boxes = @_; # List of references.

    # Find the maximum box parameters for padding
    my ($height, $foot, $head) = (1, 0, 0);
    foreach my $box (@boxes) {
        $box->{height} > $height ? $height = $box->{height} : 1;
        $box->{foot} > $foot     ? $foot   = $box->{foot}   : 1;
        $box->{head} > $head     ? $head   = $box->{head}   : 1;
    }

    foreach my $box (@boxes) {
        vpad($foot, $head, $box);
    }

    # What I'm trying to express here is something like
    # '$content[0] = box1[0] . box2[0] . box3[0]'.
    my @content;
    for my $i (0 ..  $height-1) {
        my $line = '';
        $line .= $_->{content}->[$i] foreach (@boxes);
        push @content, $line;
    }

    my $box = {
        content => \@content,
        width   => length($content[0]),
        height  => $height,
        foot    => $foot,
        head    => $head,
    };

    return $box;
}

sub vpad {
    # vpad, rather stupidly, pads a single box according to the box' own
    # dimensional specifications.
    D("> vpad");
    my $foot = shift;
    my $head = shift;
    my $box  = shift;  # Reference

    my $width   = $box->{width};  # TODO Calculate?
    my @content = @{$box->{content}};

    while ($box->{head}++ < $head) {
        unshift @content, " "x$width;
    }
    while ($box->{foot}++ < $foot) {
        push @content, " "x$width;
    }

    $box->{content} = \@content;
    $box->{height}  = $#content +1;
    $box->{foot}    = $foot;  # TODO Calculate!
    $box->{head}    = $head;

    return 1;  # TODO Error checking.
}

sub hpad {
    my @boxes = @_;  # References (first argument might be a string).
    my $width = 1;   # Minimal box width.
    my $align = "center";  # Standard alignment

    # If the first argument is a string, it ought to be an alignment.
    ref $boxes[0] ? 0 : ($align = shift @boxes);

    # Find maximum box width
    foreach my $box (@boxes) {
        $width < $box->{width} ? $width = $box->{width} : 0;
    }

    # Pad each box according to the alignment description.
    foreach my $box (@boxes) {
        foreach my $line (@{$box->{content}}) {
            given ($align) {
                when (/right/) { # Can be 'right', 'right-aligned', ...
                    my $pad = $width - length($line);
                    $line   = " "x$pad . $line;
                }
                when (/left/) {
                    my $pad = $width - length($line);
                    $line   = $line . " "x$pad;
                }
                default { # 'center' or whatever.
                    my $pad = floor( ($width - length($line)) / 2);
                    $line   = " "x$pad . $line . " "x$pad;
                    if ( $width - length($line) > 0 ) {
                        # Pad one extra to the left for odd lengths
                        $line = " $line";
                    }
                }
            }
        }
        $box->{width} = $width;
    }

    return $width;
}

sub is_primitive {
    my $char = shift;

    if (defined $char and length($char) == 1) {
        return ($char =~ /(\{|\}|\\|\^|_)/ ? '' : 1);
    } else {
        return 0;
    }
}

sub is_empty_box {
    my $box = shift;
    return 1 if ($box->{width} + $box->{height} == 0);
    return 0;
}

sub is_unit_box {
    my $box = shift;
    return 1 if ($box->{width} * $box->{height} == 1);
    return 0;
}

# Character Characterisation :)
sub is_superscriptable {
    my $box = shift;

    return 0 unless (is_unit_box($box));

    my $char = $box->{content}->[0];
    my $superscripts = get_superscripts;
    if (defined $superscripts->{$char}) {
        return $superscripts->{$char};
    } else {
        return 0;
    }
}

sub is_subscriptable {
    my $box = shift;

    return 0 unless is_unit_box($box);

    my $char = $box->{content}->[0];
    my $subscripts = get_subscripts;
    if (defined $subscripts->{$char}) {
        return $subscripts->{$char};
    } else {
        return 0;
    }
}

# Macro Handler Functions (Content)
sub process_macro {
    my $str = shift; # reference
    my $cmd;
    D('> process_macro');

    while ($str->[0] =~ /[,a-zA-Z]/) {
        $cmd .= shift @$str;
    }

    return handle($cmd, $str);
}

sub find_limits {
    # TODO Belongs into the parser section!
    my $str = shift;
    my ($upper, $lower);

    foreach (0 .. 1) {
        last unless @$str;
        given ($str->[0]) {
            when (/\^/) { # upper limit
                last if (defined $upper);
                shift @$str;
                $upper = find_block($str);
            }
            when (/_/)  { # lower limit
                last if (defined $lower);
                shift @$str;
                $lower = find_block($str);
            }
            default { return ($upper, $lower) } # TODO Return empty box?
        }
    }

    return ($upper, $lower);
}

sub find_block {
    # TODO Belongs into the parser section!
    my $str   = shift;  # Reference.

    D('> find_block [' . join('', @$str) . ']');
    my ($package, $filename, $line, $subroutine ) = caller(1);
    D('> > caller: ' . $subroutine);

    if (is_primitive($str->[0])) {
        return make_unity_box(shift @$str);
    } elsif (@$str and $str->[0] =~ /\\/) {   # TODO Create is_macro().
        shift @$str;
        return process_macro($str); # TODO Could test whether '\' exists.
    } else { # Real block begins
        my $block = '';
        my $depth = 0;

        while (scalar(@$str)) {
            my $char = shift @$str;
            given ($char) {
                when (/\{/) {
                    # Put only nested opening blocks on the stack.
                    $block .= $char if ($depth > 0);
                    $depth++;
                }
                when (/\}/) {
                    $depth--;
                    $block .= $char if ($depth > 0);
                    last if ($depth == 0);
                }
                default { $block .= $char }
            }
        }
        return expand($block);
    }
}

sub find_ext_block {
    # TODO Adding experimental support for \left, \right blocks...
    my $str   = shift;  # Reference.
    my $begin = ( @_ ? quotemeta(shift) : '{' ); # Possible values: '('
    my $end   = ( @_ ? quotemeta(shift) : '}' ); # Possible values: '\right)'

    my $string = join('', @$str);  # TODO Think long and hard about this.

    D("> find_ext_block [$begin...$end in '$string']");

    my $block = '';
    my $depth = 1;  # Compensate for missing opening token!

    while (length($string)) {
        $depth++ if ($string =~ /^$begin/);
        $depth-- if ($string =~ /^$end/);
        last     if ($depth == 0);

        $block .= substr $string, 0, 1, '';  # Essentially shift().

        die "Unbalanced parens" if ($depth < 0); # TODO Beautify!
    }
    return expand($block);
}

sub find_option {
    # TODO Belongs into the parser section!
    my $str    = shift;  # Reference.
    my $string = join('', @$str);
    D("> find_option [$string]");

    if ( $string =~ /^\[(.*?)\](.*)$/ ) {
        my $box = make_unity_box();

        @$str = split(//, $2);
        $box->{content}->[0] = $1;
        $box->{width}        = length($1);

        return $box; # TODO Check, that it's a simple number!
    } else {
        return make_empty_box();
    }
}

# Input
sub normalize_input { # TODO _Very_ dangerous: '\times a' -> '\timesa'
    my $in = shift;

    # TODO Introduce 'spacious' option!
    #$in =~ s/\s{2,}/ /g;  # Using this line will break /many/ tests!
    $in =~ s/\s//g;

    return $in;
}

sub substitute_chars {
    # TODO Belongs into the character section
    my $in = shift;
    my $chars = get_primitive_chars;

    while (my ($tex, $code) = each %$chars) {
        $in =~ s/\\$tex/$code/g;
    }

    return $in;
}

# Helper
sub D {
    if ($DEBUG) {
        my $msg = shift;
        print STDERR $msg . "\n";
    }
}

